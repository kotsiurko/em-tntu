import { useState, useEffect } from "react";
import Head from 'next/head'
import { useRouter } from "next/router";
import { urlFor } from "../../../lib/client";
import Image from "next/image";
import BlockContent from "@sanity/block-content-to-react";

// Client connection
import { menuItems } from '@/components/Header/menuItems';
import { client, clientConfig } from "@/lib/client";
import { mainMenuQueriesObjCreator, chapterItemQuery, slugCurrent } from '@/lib/queries';
import { menuCreator, menuItemsMerger } from '@/lib/menuCreator';

// Components
import Header from "/components/Header/Header";
import { Breadcrumbs } from "@/components/Breadcrumbs/Breadcrumbs";

// Other libs
import moment from "moment";
import { Lightbox } from "yet-another-react-lightbox";
import "yet-another-react-lightbox/styles.css";



const StakeholdersItemArticle = ({ stakeholdersPage, mainMenuQO }) => {

  const [open, setOpen] = useState(false);

  const { title, body, position, slug, } = stakeholdersPage;

  // const galleryImgArr = [{ src: urlFor(mainPhoto).url() }];

  const router = useRouter();
  const { pathname } = router;

  // MENU FORMATION PART ==============================================

  const [mainMenuArr, setMainMenuArr] = useState(menuItems);

  useEffect(() => {

    const menuObj = menuItemsMerger(
      menuItems,
      mainMenuQO,
    )

    setMainMenuArr((prevState) => {
      if (prevState) {
        return menuCreator(
          menuObj,
          prevState,
        )
      }
    });
  }, [stakeholdersPage, mainMenuQO]);



  // MENU FORMATION PART ENDS =========================================


  return (
    <>
      <Head>
        <title>Кафедра електричної інженерії ТНТУ :: {title}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>

      {/* В хедер треба передавати вже сформований масив */}
      <Header mainMenuArr={mainMenuArr} />

      <Breadcrumbs
        chapterTitle="Спеціальності"
        pageTitle="Наші стейкхолдери"
        pageUrl={null}
        subPageTitle={title}
        subPageUrl={slug.current}

      // chapterTitle="Спеціальності"
      // pageTitle="Наші стейкхолдери"
      // pageUrl={null}
      // subPageTitle={}
      // subPageUrl={}
      />

      {/* < !-- ======= Features Section ======= --> */}
      <section className="features my-personal">
        <div className="container" data-aos="fade-up">

          {/* <!-- Feature Icons --> */}
          <div className="row feature-icons" data-aos="fade-up">

            <div className="row gx-0">

              <h3>{title}</h3>

              <div className="col-xl-12 pt-2 px-2">
                <div className="row align-self-start content text-justify">
                  <div className="icon-box my-dstyle" data-aos="fade-up">

                    <BlockContent
                      blocks={body}
                      projectId={clientConfig.projectId}
                      dataset={clientConfig.dataset}
                    />

                  </div>
                </div>
              </div>

              {/* <div> */}
              {/* <Lightbox
                open={open}
                close={() => setOpen(false)}
                slides={galleryArray}
              /> */}
              {/* </div> */}

            </div>

          </div>
          {/* <!-- End Feature Icons --> */}

        </div >
      </section >
      {/* <!--End Features Section-- > */}
    </>
  )
}


export default StakeholdersItemArticle;

export async function getStaticPaths() {
  const newsArr = await client.fetch(slugCurrent("stakeholders"));

  const paths = newsArr.map((newsItem) => ({
    params: {
      slug: newsItem.slug.current
    }
  }));
  return {
    paths, fallback: 'blocking'
  }
}

export async function getStaticProps({ params: { slug } }) {

  const stakeholdersPage = await client.fetch(chapterItemQuery("specialities-sh", `/specialities/stakeholders/${slug}`));
  const mainMenuQO = await mainMenuQueriesObjCreator();

  return {
    props: {
      stakeholdersPage,
      mainMenuQO,
    }
  }
}